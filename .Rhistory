g
x
y = x + g
y
colnames(y)
colnames(g)
colnames(g) <- diagnosis
colnames(g) <- "diagnosis"
g[1]
d[1,1]
d[1,2]
d[2,1]
d[3,1]
x[3,1]
x[1,1]
x[1,]
x[,1]
x[1,]
g
training
training2 <- training
training2
training2[1]
training2[2]
training2[1,1]
training2[2,1]
training2[1,2]
training2[1,3]
training2[2,1]
training2[1,1]
training2[0,1]
training2[0,0]
training2[0,1]
training2[1,0]
colname(training2)
colname(training2)
colnames(training2)
??colnames
?colnames
colnames(training2)
colnames(training2)[1]
colnames(training2)[1] <- c("IL_diag")
colnames(training2)[1]
colnames(training2)
?preProcess
grep("^IL_", colnames(training))
grep("^IL_", colnames(training2))
x2 <- grep("^IL_", colnames(training2))
x2
x2 <- training2[grep("^IL_", colnames(training2))]
x2
colnames(x2)
preProcess(x2, method="pca", thresh=0.8)
preProcess(x, method="pca", thresh=0.8)
preProcess(x2, method="pca", thresh=0.8)
x2[1]
x2[1]
as.character.numeric_version(x2[1])
x3 <- as.character.numeric_version(x2[1])
preProcess(x3, method="pca", thresh=0.8)
class(x2)
class(x2[1])
class(x2[1, ])
class(x2[2, ])
x2[1, ]
x2[1]
class(x2[1])
g
preProcess(g, method="pca", thresh=0.8)
g[1]
class(g[1])
class(g[2])
save.image("C:\\Users\\MY\\Documents\\r2")
q()
x
?transform
?replace
training
training#diagnosis
?sapply
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
xx
load("C:\\Users\\MY\\Documents\\.RData")
xx
training2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training$diagnosis
if(training$diagnosis == Control)
q
if(training$diagnosis == Control) training = 1
if(training$diagnosis == "Control") training = 1
if(training$diagnosis == "Control") training <- 1
if(training$diagnosis == "Control") training2 <- 1
training2 <-training
training2[1]
training2[1,]
training2[,1]
training2
training
training2
training$diagnosis
training$diagnosistraining = adData[ inTrain,]
testing = adData[-inTrain,]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <-training
training2
training2$diagnosis
training2$diagnosis == "Control"
as.numberic(training2$diagnosis == "Control")
as.numeric
as.numeric(training2$diagnosis == "Control")
nn <- as.numeric(training2$diagnosis == "Control")
class(nn)
training2$diagnosis
training2$diagnosis <- nn
training2$diagnosis
class(training2$diagnosis)
preProc
preProc <- preprocess()
colnames(training2)
colnames(training2[1])
colnames(training2[1]) <- IL_diag
colnames(training2[1]) <- "IL_diag"
colnames(training2[1])
colnames(training2[1]) <-"IL_diag"
colnames(training2[1])
colnames(training2[1]) <-"IL_diag"
colnames(training2[1])
colnames(training2[1])<-"IL_diag"
colnames(training2[1])
colnames(g) <- "diagnosis"
g
colnames(training2)
colnames(training2)[1]
colnames(training2)[1] <- IL_Diag
colnames(training2)[1] <- "IL_Diag"
colnames(training2)[1]
training[grep("^IL_", colnames(training))]
training2[grep("^IL_", colnames(training2))]
grep("^IL_", colnames(training2))
training2[grep("^IL_", colnames(training2))]
t3 <- training2[grep("^IL_", colnames(training2))]
?preProcess
preproc <- preProcess(t3, method="pca", thresh=0.8)
preProcess
preproc
trainPC <- predict(preproc, t3)
trainPC
t3$type
training2$type
training$type
?train
modelFit <- train(t3$type ~., method="glm", data=trainPC)
modelFit <- train(t3, method="glm", data=trainPC)
modelFit <- train(training, t3, method="glm", data=trainPC)
length(t3)
t3
modelFit <- train(training, t3, method="glm", data=trainPC)
nrow(x)
nrow(training2)
nrow(t3)
modelFit <- train(t3, t3, method="glm", data=trainPC)
nrow(t3)
t3
length(t3[1])
length(t3[1,])
length(t3[,1])
?train
colnames(training)
training$Genotype
training2
training2[1]
colnames(training2)
colnames(training2[1])
colnames(training2[1]) <- diagnosis
colnames(training2[1]) <- "diagnosis"
colnames(training2)
colnames(training2[1])
colnames(training2[1]) <- "diagnosis"
colnames(training2[1])
training2[1]
training2[1][1]
training2[1,]
training2[,1]
training2[1,1]
colnames(training2)
colnames(training2)[1]
colnames(training2)[1]  <- "diagnosis"
colnames(training2)[1]
colnames(training2)
t3
colnames(t3)
colnames(t3)[1]
colnames(t3)[1]  <- "diagnosis"
t3
t3[1]
preProcess <- preProcess(t3, method="pca", thre= 0.8)
preProcess
trainPC <- predict(preProcess, t3)
trainPC
modelFit <- train(t3, t3[1], method="glm", data=trainPC)
length(t3)
length(t3[1])
t3[1]
length(t3)
modelFit <- train(t3, t3, method="glm", data=trainPC)
t3
modelFit <- train(t3, t3, method="glm", data=trainPC)
length(t3)
nrow(t3)
nrow(t3[1])
length(t3[1])
length(t3[1,])
length(t3[,1])
modelFit <- train(t3, t3[,1], method="glm", data=trainPC)
warnings()
t3[,1]
yy <- t3[,1]
length(yy)
modelFit <- train(t3, yy, method="glm", data=trainPC)
t3
warnings()
modelFit <- train(t3, yy, method="glm", data=trainPC)
trainPC
modelFit <- train(t3$diagnosis ~, method="glm", data=trainPC)
modelFit <- train(t3$diagnosis ~. , method="glm", data=trainPC)
modelFit
confusionMatrix(t3$diagnosis, predict(modelFit, testing))
confusionMatrix(t3$diagnosis, predict(modelFit, testing))
confusionMatrix(t3$diagnosis, predict(modelFit, testing))
predict(modelFit, testing)
predict(modelFit, training)
predict(modelFit, t3)
confusionMatrix(t3$diagnosis, predict(modelFit, testPC))
testPC <- predict(preProcess, t3)
preProcess
testPC
confusionMatrix(t3$diagnosis, predict(modelFit, testPC))
testPC <- predict(preProcess, testing)
testPC <- predict(preProcess, testing)
preProcess
testPC <- predict(preProcess, testing)
preProcess
preproc
testPC <- predict(preproc, testing)
preproc2 <- preProcess(training)
training[grep(^IL)]
training[grep(training(^IL))]
grep(training, "^IL")
?grep
grep("^IL", training)
grep("^IL", training[,1])
grep("^IL", training[1,])
training[1,]
training[,1]
training[1]
training[1,]
t3 <- training2[grep("^IL_", colnames(training2))]
training[grep("^IL_", colnames(training))]
grep("^IL_", colnames(training))
training[grep("^IL_", colnames(training))]
training[grep("^IL_", colnames(training))]
prePrc2 <- preProcess(training[grep("^IL_", colnames(training))], method="pca", thre=0.8)
preProc2
prePrc2
trainPC <- predict(prePrc2, training[grep("^IL_", colnames(training))])
trainPC
modelFit <- train\
modelFit <- train(training[grep("^IL_", colnames(training))]$diagnosis ~. , method="glm", data=trainPC)
modelFit <- train(training[grep("^IL_", colnames(training))]$diagnosis ~. , method="glm", data=trainPC)
training[grep("^IL_", colnames(training))]$diagnosis
modelFit <- train(training$diagnosis ~. , method="glm", data=trainPC)
training$diagnosis
modelFit <- train(training$diagnosis ~. , method="glm", data=trainPC)
install.packages("e1071")
modelFit <- train(training$diagnosis ~. , method="glm", data=trainPC)
modelFit
modelFit <- train(training$diagnosis, training[grep("^IL_", colnames(training))] , method="glm", data=trainPC)
training[grep("^IL_", colnames(training))]
modelFit <- train(training$diagnosis, training[grep("^IL_", colnames(training))] , method="glm", data=trainPC)
modelFit <- train(training[grep("^IL_", colnames(training))], training%diagnosis , method="glm", data=trainPC)
modelFit <- train(training[grep("^IL_", colnames(training))], training%diagnosis , method="glm", data=trainPC)
a = training[grep("^IL_", colnames(training))]
a
modelFit <- train(a, training%diagnosis , method="glm", data=trainPC)
nrow(a)
modelFit <- train(training, training%diagnosis , method="glm", data=trainPC)
modelFit <- train(training$diagnosis ~. , method="glm", data=trainPC)
testPC <- predict(prePrc2, testing[grep("^IL_", colnames(testing))])
testPC
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
?preprocess
?preProcess
?train
preproc_nopc <- preProcess(training[grep("^IL_", colnames(training))])
preproc_nopc
trainNoPC <- predict(preproc_nopc, training[grep("^IL_", colnames(training))])
trainNoPC
model_nopc <- train(training$diagnosis ~. , method="glm", data=trainnopc)
model_nopc <- train(training$diagnosis ~. , method="glm", data=trainNoPC)
class(model_nopc)
model_nopc
preproc_nopc
testNoPC <- predict(preproc_nopc, testing[grep("^IL_", colnames(testing))])
testNoPC
testNoPC <- predict(preproc_nopc, testing[grep("^IL_", colnames(testing))])
confusionMatrix(testing$diagnosis, predict(model_nopc, testNoPC))
save.image("C:\\Users\\MY\\Documents\\R3")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
train$SuperPlasticizer
training$SuperPlasticizer
training
colnames(training)
rownames(training)
colnames(training)
training$SuperPlasticizer
training$Superplasticizer
training$SuperPlasticizer
training$Superplasticizer
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log10(training$Superplasticizer + 1))
hist(log10(training$Superplasticizer + 1))
hist(log10(training$Superplasticizer ))
hist(log10(testing$Superplasticizer ))
log10(testing$Superplasticizer )
testing$Superplasticizer
testing$Superplasticizer+1
hist(testing$Superplasticizer+1)
log10(testing$Superplasticizer+1)
hist(log10(testing$Superplasticizer+1))
log10(testing$Superplasticizer+1)
testing$Superplasticizer+1
library(UsingR)
install.packages("UsingR")
mtcar
mtcars
?data
data(mtcars)
mtcars
x <- mtcars$wt
x
y = mtcars$mpg * 2 /x
y
y = mtcars$mpg * 2
y
y = y/x
y
n <- length(x)
n
n <- length(y)
n
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coeftables
coefTable
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
fit <- lm(y ~ x);
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef
sumCoef[2,2]
mtcars
y = mtcars$mpg
y
x = mtcars$wt /2
x
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x"
)
coefTable
fit <- lm(y ~ x);
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
resid(fit)
sum(resid(fit))
sum(resid(fit)^2)
ssx
y = mtcars$mpg
x = mtcars$wt
fit <- lm(y ~ x)
fit
resid(fit)
sum(resid(fit)^2)
ssx
fit
fit[1]
fit[1][1]
fit$coefficients
fit$coefficients[1]
fit$coefficients[2]
slope = fit$coefficients[2]
y2 = x* slope
y2
?lm
sum(resid(fit)^2)
s1 = sum(resid(fit)^2)
fit2 = lm(y ~ x -1)
fit2
fit1
fit
resid(fit2)
sum(resid(fit2)^2)
s2 = sum(resid(fit2)^2)
s1/s2
s2/s1
fit2
y-x*5.292
sum(y-x*5.292)
sum((y-x*5.292)^2)
s1 = sum(resid(fit)^2)
s1/s2
fit = lm(y ~ x)
s1 = sum(resid(fit)^2)
s1/s2
y
x
mtcars
?lm
average(y)
avg
sum(y)/length(y)
length(y)
sum(y)
sum(y)/length(y)
y - (sum(y)/length(y))*x
(y - (sum(y)/length(y))*x)^2
sum((y - (sum(y)/length(y))*x)^2)
s3 = sum((y - (sum(y)/length(y))*x)^2)
s1/s3
s1
fit
(sum(y)/length(y)
sum(y)/length(y)
sum(y)/length(y)
avg = sum(y)/length(y)
s3 = sum((y - (sum(y)/length(y)))^2)
s3
s1/s3
fit
x2
fit
x2 = x+3
fit_mod = lm(y ~ x2)
fit_mod
save.image("C:\\Users\\MY\\Documents\\r4")
q()
install.packages("caret")
library(caret)
q()
library(caret)
q()
setwd("~/")
setwd("~/")
dir()
]
pwd
pwd()
dir()
setwd("D:/source/WLE")
